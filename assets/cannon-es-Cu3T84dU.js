class t{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new i);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new i);const s=this.elements,n=t.x,o=t.y,r=t.z;return e.x=s[0]*n+s[1]*o+s[2]*r,e.y=s[3]*n+s[4]*o+s[5]*r,e.z=s[6]*n+s[7]*o+s[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(e,i){void 0===i&&(i=new t);const s=this.elements,n=e.elements,o=i.elements,r=s[0],a=s[1],l=s[2],h=s[3],c=s[4],u=s[5],d=s[6],p=s[7],y=s[8],v=n[0],m=n[1],w=n[2],f=n[3],g=n[4],x=n[5],b=n[6],E=n[7],z=n[8];return o[0]=r*v+a*f+l*b,o[1]=r*m+a*g+l*E,o[2]=r*w+a*x+l*z,o[3]=h*v+c*f+u*b,o[4]=h*m+c*g+u*E,o[5]=h*w+c*x+u*z,o[6]=d*v+p*f+y*b,o[7]=d*m+p*g+y*E,o[8]=d*w+p*x+y*z,i}scale(e,i){void 0===i&&(i=new t);const s=this.elements,n=i.elements;for(let t=0;3!==t;t++)n[3*t+0]=e.x*s[3*t+0],n[3*t+1]=e.y*s[3*t+1],n[3*t+2]=e.z*s[3*t+2];return i}solve(t,e){void 0===e&&(e=new i);const s=[];let n,o;for(n=0;n<12;n++)s.push(0);for(n=0;n<3;n++)for(o=0;o<3;o++)s[n+4*o]=this.elements[n+3*o];s[3]=t.x,s[7]=t.y,s[11]=t.z;let r=3;const a=r;let l;let h;do{if(n=a-r,0===s[n+4*n])for(o=n+1;o<a;o++)if(0!==s[n+4*o]){l=4;do{h=4-l,s[h+4*n]+=s[h+4*o]}while(--l);break}if(0!==s[n+4*n])for(o=n+1;o<a;o++){const t=s[n+4*o]/s[n+4*n];l=4;do{h=4-l,s[h+4*o]=h<=n?0:s[h+4*o]-s[h+4*n]*t}while(--l)}}while(--r);if(e.z=s[11]/s[10],e.y=(s[7]-s[6]*e.z)/s[5],e.x=(s[3]-s[2]*e.z-s[1]*e.y)/s[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,i){if(void 0===i)return this.elements[e+3*t];this.elements[e+3*t]=i}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(i){void 0===i&&(i=new t);const s=e;let n,o;for(n=0;n<3;n++)for(o=0;o<3;o++)s[n+6*o]=this.elements[n+3*o];s[3]=1,s[9]=0,s[15]=0,s[4]=0,s[10]=1,s[16]=0,s[5]=0,s[11]=0,s[17]=1;let r=3;const a=r;let l;let h;do{if(n=a-r,0===s[n+6*n])for(o=n+1;o<a;o++)if(0!==s[n+6*o]){l=6;do{h=6-l,s[h+6*n]+=s[h+6*o]}while(--l);break}if(0!==s[n+6*n])for(o=n+1;o<a;o++){const t=s[n+6*o]/s[n+6*n];l=6;do{h=6-l,s[h+6*o]=h<=n?0:s[h+6*o]-s[h+6*n]*t}while(--l)}}while(--r);n=2;do{o=n-1;do{const t=s[n+6*o]/s[n+6*n];l=6;do{h=6-l,s[h+6*o]=s[h+6*o]-s[h+6*n]*t}while(--l)}while(o--)}while(--n);n=2;do{const t=1/s[n+6*n];l=6;do{h=6-l,s[h+6*n]=s[h+6*n]*t}while(--l)}while(n--);n=2;do{o=2;do{if(h=s[3+o+6*n],isNaN(h)||h===1/0)throw`Could not reverse! A=[${this.toString()}]`;i.e(n,o,h)}while(o--)}while(n--);return i}setRotationFromQuaternion(t){const e=t.x,i=t.y,s=t.z,n=t.w,o=e+e,r=i+i,a=s+s,l=e*o,h=e*r,c=e*a,u=i*r,d=i*a,p=s*a,y=n*o,v=n*r,m=n*a,w=this.elements;return w[0]=1-(u+p),w[1]=h-m,w[2]=c+v,w[3]=h+m,w[4]=1-(l+p),w[5]=d-y,w[6]=c-v,w[7]=d+y,w[8]=1-(l+u),this}transpose(e){void 0===e&&(e=new t);const i=this.elements,s=e.elements;let n;return s[0]=i[0],s[4]=i[4],s[8]=i[8],n=i[1],s[1]=i[3],s[3]=n,n=i[2],s[2]=i[6],s[6]=n,n=i[5],s[5]=i[7],s[7]=n,e}}const e=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class i{constructor(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.z=i}cross(t,e){void 0===e&&(e=new i);const s=t.x,n=t.y,o=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*o-l*n,e.y=l*s-r*o,e.z=r*n-a*s,e}set(t,e,i){return this.x=t,this.y=e,this.z=i,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new i(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new i(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new t([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,i=this.z,s=Math.sqrt(t*t+e*e+i*i);if(s>0){const t=1/s;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return s}unit(t){void 0===t&&(t=new i);const e=this.x,s=this.y,n=this.z;let o=Math.sqrt(e*e+s*s+n*n);return o>0?(o=1/o,t.x=e*o,t.y=s*o,t.z=n*o):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,i=this.z;return Math.sqrt(t*t+e*e+i*i)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s))}distanceSquared(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s)}scale(t,e){void 0===e&&(e=new i);const s=this.x,n=this.y,o=this.z;return e.x=t*s,e.y=t*n,e.z=t*o,e}vmul(t,e){return void 0===e&&(e=new i),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return void 0===s&&(s=new i),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new i),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const i=this.length();if(i>0){const o=s,r=1/i;o.set(this.x*r,this.y*r,this.z*r);const a=n;Math.abs(o.x)<.9?(a.set(1,0,0),o.cross(a,t)):(a.set(0,1,0),o.cross(a,t)),o.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,i){const s=this.x,n=this.y,o=this.z;i.x=s+(t.x-s)*e,i.y=n+(t.y-n)*e,i.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(o),o.almostEquals(t,e)}clone(){return new i(this.x,this.y,this.z)}}i.ZERO=new i(0,0,0),i.UNIT_X=new i(1,0,0),i.UNIT_Y=new i(0,1,0),i.UNIT_Z=new i(0,0,1);const s=new i,n=new i,o=new i;class r{constructor(t){void 0===t&&(t={}),this.lowerBound=new i,this.upperBound=new i,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,i,s){const n=this.lowerBound,o=this.upperBound,r=i;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let l=1;l<t.length;l++){let e=t[l];r&&(r.vmult(e,a),e=a),e.x>o.x&&(o.x=e.x),e.x<n.x&&(n.x=e.x),e.y>o.y&&(o.y=e.y),e.y<n.y&&(n.y=e.y),e.z>o.z&&(o.z=e.z),e.z<n.z&&(n.z=e.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),s&&(n.x-=s,n.y-=s,n.z-=s,o.x+=s,o.y+=s,o.z+=s),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new r).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound,o=s.x<=i.x&&i.x<=n.x||e.x<=n.x&&n.x<=i.x,r=s.y<=i.y&&i.y<=n.y||e.y<=n.y&&n.y<=i.y,a=s.z<=i.z&&i.z<=n.z||e.z<=n.z&&n.z<=i.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound;return e.x<=s.x&&i.x>=n.x&&e.y<=s.y&&i.y>=n.y&&e.z<=s.z&&i.z>=n.z}getCorners(t,e,i,s,n,o,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),i.set(h.x,h.y,l.z),s.set(l.x,h.y,h.z),n.set(h.x,l.y,h.z),o.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const i=l,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],h=i[5],c=i[6],u=i[7];this.getCorners(s,n,o,r,a,h,c,u);for(let l=0;8!==l;l++){const e=i[l];t.pointToLocal(e,e)}return e.setFromPoints(i)}toWorldFrame(t,e){const i=l,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],h=i[5],c=i[6],u=i[7];this.getCorners(s,n,o,r,a,h,c,u);for(let l=0;8!==l;l++){const e=i[l];t.pointToWorld(e,e)}return e.setFromPoints(i)}overlapsRay(t){const{direction:e,from:i}=t,s=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-i.x)*s,a=(this.upperBound.x-i.x)*s,l=(this.lowerBound.y-i.y)*n,h=(this.upperBound.y-i.y)*n,c=(this.lowerBound.z-i.z)*o,u=(this.upperBound.z-i.z)*o,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const a=new i,l=[new i,new i,new i,new i,new i,new i,new i,new i];class h{constructor(){this.matrix=[]}get(t,e){let{index:i}=t,{index:s}=e;if(s>i){const t=s;s=i,i=t}return this.matrix[(i*(i+1)>>1)+s-1]}set(t,e,i){let{index:s}=t,{index:n}=e;if(n>s){const t=n;n=s,s=t}this.matrix[(s*(s+1)>>1)+n-1]=i?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class c{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;return void 0===i[t]&&(i[t]=[]),i[t].includes(e)||i[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return!(void 0===i[t]||!i[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const i=this._listeners;if(void 0===i[t])return this;const s=i[t].indexOf(e);return-1!==s&&i[t].splice(s,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let i=0,s=e.length;i<s;i++)e[i].call(this,t)}return this}}class u{constructor(t,e,i,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===s&&(s=1),this.x=t,this.y=e,this.z=i,this.w=s}set(t,e,i,s){return this.x=t,this.y=e,this.z=i,this.w=s,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const i=Math.sin(.5*e);return this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new i),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=d,i=p;t.tangents(e,i),this.setFromAxisAngle(e,Math.PI)}else{const i=t.cross(e);this.x=i.x,this.y=i.y,this.z=i.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new u);const i=this.x,s=this.y,n=this.z,o=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=i*h+o*r+s*l-n*a,e.y=s*h+o*a+n*r-i*l,e.z=n*h+o*l+i*a-s*r,e.w=o*h-i*r-s*a-n*l,e}inverse(t){void 0===t&&(t=new u);const e=this.x,i=this.y,s=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+i*i+s*s+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new u),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new i);const s=t.x,n=t.y,o=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*s+a*o-l*n,u=h*n+l*s-r*o,d=h*o+r*n-a*s,p=-r*s-a*n-l*o;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let i,s,n;void 0===e&&(e="YZX");const o=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const t=o*r+a*l;if(t>.499&&(i=2*Math.atan2(o,l),s=Math.PI/2,n=0),t<-.499&&(i=-2*Math.atan2(o,l),s=-Math.PI/2,n=0),void 0===i){const e=o*o,h=r*r,c=a*a;i=Math.atan2(2*r*l-2*o*a,1-2*h-2*c),s=Math.asin(2*t),n=Math.atan2(2*o*l-2*r*a,1-2*e-2*c)}}t.y=i,t.z=s,t.x=n}setFromEuler(t,e,i,s){void 0===s&&(s="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(i/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(i/2);return"XYZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"YXZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"ZXY"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"ZYX"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"YZX"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r-a*l*h):"XZY"===s&&(this.x=a*o*r-n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r+a*l*h),this}clone(){return new u(this.x,this.y,this.z,this.w)}slerp(t,e,i){void 0===i&&(i=new u);const s=this.x,n=this.y,o=this.z,r=this.w;let a,l,h,c,d,p=t.x,y=t.y,v=t.z,m=t.w;return l=s*p+n*y+o*v+r*m,l<0&&(l=-l,p=-p,y=-y,v=-v,m=-m),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,d=Math.sin(e*a)/h):(c=1-e,d=e),i.x=c*s+d*p,i.y=c*n+d*y,i.z=c*o+d*v,i.w=c*r+d*m,i}integrate(t,e,i,s){void 0===s&&(s=new u);const n=t.x*i.x,o=t.y*i.y,r=t.z*i.z,a=this.x,l=this.y,h=this.z,c=this.w,d=.5*e;return s.x+=d*(n*c+o*h-r*l),s.y+=d*(o*c+r*a-n*h),s.z+=d*(r*c+n*l-o*a),s.w+=d*(-n*a-o*l-r*h),s}}const d=new i,p=new i;class y{constructor(t){void 0===t&&(t={}),this.id=y.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,i,s){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}y.idCounter=0,y.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class v{constructor(t){void 0===t&&(t={}),this.position=new i,this.quaternion=new u,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return v.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return v.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new i),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return void 0===n&&(n=new i),s.vsub(t,n),e.conjugate(m),m.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return void 0===n&&(n=new i),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return void 0===s&&(s=new i),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return void 0===n&&(n=new i),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const m=new u;class w extends y{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:i=[],normals:s=[],axes:n,boundingSphereRadius:o}=t;super({type:y.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=i,this.faceNormals=s,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new i;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let t=0;t!==r;t++){const i=(t+1)%r;e[o[t]].vsub(e[o[i]],n),n.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(n)||s[t].almostEquals(n)){a=!0;break}a||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let i=0;i<this.faces[t].length;i++)if(!this.vertices[this.faces[t][i]])throw new Error(`Vertex ${this.faces[t][i]} not found!`);const e=this.faceNormals[t]||new i;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0)for(let i=0;i<this.faces[t].length;i++);}}getFaceNormal(t,e){const i=this.faces[t],s=this.vertices[i[0]],n=this.vertices[i[1]],o=this.vertices[i[2]];w.computeNormal(s,n,o,e)}static computeNormal(t,e,s,n){const o=new i,r=new i;e.vsub(t,r),s.vsub(e,o),o.cross(r,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,o,r,a,l,h){const c=new i;let u=-1,d=-Number.MAX_VALUE;for(let i=0;i<s.faces.length;i++){c.copy(s.faceNormals[i]),o.vmult(c,c);const t=c.dot(r);t>d&&(d=t,u=i)}const p=[];for(let y=0;y<s.faces[u].length;y++){const t=s.vertices[s.faces[u][y]],e=new i;e.copy(t),o.vmult(e,e),n.vadd(e,e),p.push(e)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,s,n,o,r,a,l){const h=new i,c=new i,u=new i,d=new i,p=new i,y=new i;let v=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let i=0;i!==m.uniqueAxes.length;i++){s.vmult(m.uniqueAxes[i],h);const a=m.testSepAxis(h,t,e,s,n,o);if(!1===a)return!1;a<v&&(v=a,r.copy(h))}else{const i=a?a.length:m.faces.length;for(let l=0;l<i;l++){const i=a?a[l]:l;h.copy(m.faceNormals[i]),s.vmult(h,h);const c=m.testSepAxis(h,t,e,s,n,o);if(!1===c)return!1;c<v&&(v=c,r.copy(h))}}if(t.uniqueAxes)for(let i=0;i!==t.uniqueAxes.length;i++){o.vmult(t.uniqueAxes[i],c);const a=m.testSepAxis(c,t,e,s,n,o);if(!1===a)return!1;a<v&&(v=a,r.copy(c))}else{const i=l?l.length:t.faces.length;for(let a=0;a<i;a++){const i=l?l[a]:a;c.copy(t.faceNormals[i]),o.vmult(c,c);const h=m.testSepAxis(c,t,e,s,n,o);if(!1===h)return!1;h<v&&(v=h,r.copy(c))}}for(let i=0;i!==m.uniqueEdges.length;i++){s.vmult(m.uniqueEdges[i],d);for(let i=0;i!==t.uniqueEdges.length;i++)if(o.vmult(t.uniqueEdges[i],p),d.cross(p,y),!y.almostZero()){y.normalize();const i=m.testSepAxis(y,t,e,s,n,o);if(!1===i)return!1;i<v&&(v=i,r.copy(y))}}return n.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,i,s,n,o){w.project(this,t,i,s,f),w.project(e,t,n,o,g);const r=f[0],a=f[1],l=g[0],h=g[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const s=new i,n=new i;this.computeLocalAABB(n,s);const o=s.x-n.x,r=s.y-n.y,a=s.z-n.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*o*2*o+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*o*2*o)}getPlaneConstantOfFace(t){const e=this.faces[t],i=this.faceNormals[t],s=this.vertices[e[0]];return-i.dot(s)}clipFaceAgainstHull(t,e,s,n,o,r,a){const l=new i,h=new i,c=new i,u=new i,d=new i,p=new i,y=new i,v=new i,m=this,w=n,f=[];let g=-1,x=Number.MAX_VALUE;for(let i=0;i<m.faces.length;i++){l.copy(m.faceNormals[i]),s.vmult(l,l);const e=l.dot(t);e<x&&(x=e,g=i)}if(g<0)return;const b=m.faces[g];b.connectedFaces=[];for(let i=0;i<m.faces.length;i++)for(let t=0;t<m.faces[i].length;t++)-1!==b.indexOf(m.faces[i][t])&&i!==g&&-1===b.connectedFaces.indexOf(i)&&b.connectedFaces.push(i);const E=b.length;for(let i=0;i<E;i++){const t=m.vertices[b[i]],n=m.vertices[b[(i+1)%E]];t.vsub(n,h),c.copy(h),s.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(t),s.vmult(p,p),e.vadd(p,p);const o=b.connectedFaces[i];y.copy(this.faceNormals[o]);const r=this.getPlaneConstantOfFace(o);v.copy(y),s.vmult(v,v);const a=r-v.dot(e);for(this.clipFaceAgainstPlane(w,f,v,a);w.length;)w.shift();for(;f.length;)w.push(f.shift())}y.copy(this.faceNormals[g]);const z=this.getPlaneConstantOfFace(g);v.copy(y),s.vmult(v,v);const S=z-v.dot(e);for(let i=0;i<w.length;i++){let t=v.dot(w[i])+S;if(t<=o&&(t=o),t<=r){const e=w[i];if(t<=1e-6){const i={point:e,normal:v,depth:t};a.push(i)}}}}clipFaceAgainstPlane(t,e,s,n){let o,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];o=s.dot(l)+n;for(let c=0;c<a;c++){if(h=t[c],r=s.dot(h)+n,o<0)if(r<0){const t=new i;t.copy(h),e.push(t)}else{const t=new i;l.lerp(h,o/(o-r),t),e.push(t)}else if(r<0){const t=new i;l.lerp(h,o/(o-r),t),e.push(t),e.push(h)}l=h,o=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new i);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const i=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let s=0;s<this.vertices.length;s++){const n=i[s];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new i);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let i=0;i!==e.length;i++){const s=e[i].lengthSquared();s>t&&(t=s)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const o=this.vertices;let r,a,l,h,c,u,d=new i;for(let i=0;i<o.length;i++){d.copy(o[i]),e.vmult(d,d),t.vadd(d,d);const s=d;(void 0===r||s.x<r)&&(r=s.x),(void 0===h||s.x>h)&&(h=s.x),(void 0===a||s.y<a)&&(a=s.y),(void 0===c||s.y>c)&&(c=s.y),(void 0===l||s.z<l)&&(l=s.z),(void 0===u||s.z>u)&&(u=s.z)}s.set(r,a,l),n.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new i);const e=this.vertices;for(let i=0;i<e.length;i++)t.vadd(e[i],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const i=this.vertices.length,s=this.vertices;if(e){for(let t=0;t<i;t++){const i=s[t];e.vmult(i,i)}for(let t=0;t<this.faceNormals.length;t++){const i=this.faceNormals[t];e.vmult(i,i)}}if(t)for(let n=0;n<i;n++){const e=s[n];e.vadd(t,e)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,o=new i;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let a=n[r];const l=e[s[r][0]],h=new i;t.vsub(l,h);const c=a.dot(h),u=new i;o.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}static project(t,e,i,s,n){const o=t.vertices.length,r=x;let a=0,l=0;const h=b,c=t.vertices;h.setZero(),v.vectorToLocalFrame(i,s,e,r),v.pointToLocalFrame(i,s,h,h);const u=h.dot(r);l=a=c[0].dot(r);for(let d=1;d<o;d++){const t=c[d].dot(r);t>a&&(a=t),t<l&&(l=t)}if(l-=u,a-=u,l>a){const t=l;l=a,a=t}n[0]=a,n[1]=l}}const f=[],g=[];new i;const x=new i,b=new i;class E extends y{constructor(t){super({type:y.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=i,o=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],a=new w({vertices:o,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new i),E.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,i){const s=t;i.x=1/12*e*(2*s.y*2*s.y+2*s.z*2*s.z),i.y=1/12*e*(2*s.x*2*s.x+2*s.z*2*s.z),i.z=1/12*e*(2*s.y*2*s.y+2*s.x*2*s.x)}getSideNormals(t,e){const i=t,s=this.halfExtents;if(i[0].set(s.x,0,0),i[1].set(0,s.y,0),i[2].set(0,0,s.z),i[3].set(-s.x,0,0),i[4].set(0,-s.y,0),i[5].set(0,0,-s.z),void 0!==e)for(let n=0;n!==i.length;n++)e.vmult(i[n],i[n]);return i}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,i){const s=this.halfExtents,n=[[s.x,s.y,s.z],[-s.x,s.y,s.z],[-s.x,-s.y,s.z],[-s.x,-s.y,-s.z],[s.x,-s.y,-s.z],[s.x,s.y,-s.z],[-s.x,s.y,-s.z],[s.x,-s.y,s.z]];for(let o=0;o<n.length;o++)z.set(n[o][0],n[o][1],n[o][2]),e.vmult(z,z),t.vadd(z,z),i(z.x,z.y,z.z)}calculateWorldAABB(t,e,i,s){const n=this.halfExtents;S[0].set(n.x,n.y,n.z),S[1].set(-n.x,n.y,n.z),S[2].set(-n.x,-n.y,n.z),S[3].set(-n.x,-n.y,-n.z),S[4].set(n.x,-n.y,-n.z),S[5].set(n.x,n.y,-n.z),S[6].set(-n.x,n.y,-n.z),S[7].set(n.x,-n.y,n.z);const o=S[0];e.vmult(o,o),t.vadd(o,o),s.copy(o),i.copy(o);for(let r=1;r<8;r++){const n=S[r];e.vmult(n,n),t.vadd(n,n);const o=n.x,a=n.y,l=n.z;o>s.x&&(s.x=o),a>s.y&&(s.y=a),l>s.z&&(s.z=l),o<i.x&&(i.x=o),a<i.y&&(i.y=a),l<i.z&&(i.z=l)}}}const z=new i,S=[new i,new i,new i,new i,new i,new i,new i,new i],B=1,C=2,A=4,M=0,F=1,q=2;class R extends c{constructor(e){void 0===e&&(e={}),super(),this.id=R.idCounter++,this.index=-1,this.world=null,this.vlambda=new i,this.collisionFilterGroup="number"==typeof e.collisionFilterGroup?e.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof e.collisionResponse||e.collisionResponse,this.position=new i,this.previousPosition=new i,this.interpolatedPosition=new i,this.initPosition=new i,e.position&&(this.position.copy(e.position),this.previousPosition.copy(e.position),this.interpolatedPosition.copy(e.position),this.initPosition.copy(e.position)),this.velocity=new i,e.velocity&&this.velocity.copy(e.velocity),this.initVelocity=new i,this.force=new i;const s="number"==typeof e.mass?e.mass:0;this.mass=s,this.invMass=s>0?1/s:0,this.material=e.material||null,this.linearDamping="number"==typeof e.linearDamping?e.linearDamping:.01,this.type=s<=0?R.STATIC:R.DYNAMIC,typeof e.type==typeof R.STATIC&&(this.type=e.type),this.allowSleep=void 0===e.allowSleep||e.allowSleep,this.sleepState=R.AWAKE,this.sleepSpeedLimit=void 0!==e.sleepSpeedLimit?e.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==e.sleepTimeLimit?e.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new i,this.quaternion=new u,this.initQuaternion=new u,this.previousQuaternion=new u,this.interpolatedQuaternion=new u,e.quaternion&&(this.quaternion.copy(e.quaternion),this.initQuaternion.copy(e.quaternion),this.previousQuaternion.copy(e.quaternion),this.interpolatedQuaternion.copy(e.quaternion)),this.angularVelocity=new i,e.angularVelocity&&this.angularVelocity.copy(e.angularVelocity),this.initAngularVelocity=new i,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new i,this.invInertia=new i,this.invInertiaWorld=new t,this.invMassSolve=0,this.invInertiaSolve=new i,this.invInertiaWorldSolve=new t,this.fixedRotation=void 0!==e.fixedRotation&&e.fixedRotation,this.angularDamping=void 0!==e.angularDamping?e.angularDamping:.01,this.linearFactor=new i(1,1,1),e.linearFactor&&this.linearFactor.copy(e.linearFactor),this.angularFactor=new i(1,1,1),e.angularFactor&&this.angularFactor.copy(e.angularFactor),this.aabb=new r,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new i,this.isTrigger=Boolean(e.isTrigger),e.shape&&this.addShape(e.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=R.AWAKE,this.wakeUpAfterNarrowphase=!1,t===R.SLEEPING&&this.dispatchEvent(R.wakeupEvent)}sleep(){this.sleepState=R.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,i=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),s=this.sleepSpeedLimit**2;e===R.AWAKE&&i<s?(this.sleepState=R.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(R.sleepyEvent)):e===R.SLEEPY&&i>s?this.wakeUp():e===R.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(R.sleepEvent))}}updateSolveMassProperties(){this.sleepState===R.SLEEPING||this.type===R.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new i),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new i),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new i),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new i),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new i,o=new u;return e&&n.copy(e),s&&o.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(o),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e||(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null),this}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,i=t.length;let s=0;for(let n=0;n!==i;n++){const i=t[n];i.updateBoundingSphereRadius();const o=e[n].length(),r=i.boundingSphereRadius;o+r>s&&(s=o+r)}this.boundingRadius=s}updateAABB(){const t=this.shapes,e=this.shapeOffsets,i=this.shapeOrientations,s=t.length,n=N,o=P,r=this.quaternion,a=this.aabb,l=T;for(let h=0;h!==s;h++){const s=t[h];r.vmult(e[h],n),n.vadd(this.position,n),r.mult(i[h],o),s.calculateWorldAABB(n,o,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=I,i=j;t.setRotationFromQuaternion(this.quaternion),t.transpose(i),t.scale(e,t),t.mmult(i,this.invInertiaWorld)}else;}applyForce(t,e){if(void 0===e&&(e=new i),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const s=L;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new i),this.type!==R.DYNAMIC)return;const s=O,n=W;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===R.DYNAMIC&&(this.sleepState===R.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new i),this.type!==R.DYNAMIC)return;this.sleepState===R.SLEEPING&&this.wakeUp();const s=e,n=k;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const o=V;s.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new i),this.type!==R.DYNAMIC)return;const s=H,n=D;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=G;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,i=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),E.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!i?1/e.x:0,e.y>0&&!i?1/e.y:0,e.z>0&&!i?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new i;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,i){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==R.DYNAMIC&&this.type!==R.KINEMATIC||this.sleepState===R.SLEEPING)return;const s=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;s.x+=r.x*d*u.x,s.y+=r.y*d*u.y,s.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,v=a.x*y.x,m=a.y*y.y,w=a.z*y.z;n.x+=t*(p[0]*v+p[1]*m+p[2]*w),n.y+=t*(p[3]*v+p[4]*m+p[5]*w),n.z+=t*(p[6]*v+p[7]*m+p[8]*w),o.x+=s.x*t,o.y+=s.y*t,o.z+=s.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(i?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}R.idCounter=0,R.COLLIDE_EVENT_NAME="collide",R.DYNAMIC=B,R.STATIC=C,R.KINEMATIC=A,R.AWAKE=M,R.SLEEPY=F,R.SLEEPING=q,R.wakeupEvent={type:"wakeup"},R.sleepyEvent={type:"sleepy"},R.sleepEvent={type:"sleep"};const N=new i,P=new u,T=new r,I=new t,j=new t;new t;const L=new i,O=new i,W=new i,k=new i,V=new i,H=new i,D=new i,G=new i;class Y{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,i){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!==(t.collisionFilterGroup&e.collisionFilterMask)&&0!==(e.collisionFilterGroup&t.collisionFilterMask)&&(0===(t.type&R.STATIC)&&t.sleepState!==R.SLEEPING||0===(e.type&R.STATIC)&&e.sleepState!==R.SLEEPING)}intersectionTest(t,e,i,s){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,i,s):this.doBoundingSphereBroadphase(t,e,i,s)}doBoundingSphereBroadphase(t,e,i,s){const n=_;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(i.push(t),s.push(e))}doBoundingBoxBroadphase(t,e,i,s){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(i.push(t),s.push(e))}makePairsUnique(t,e){const i=U,s=X,n=Z,o=t.length;for(let r=0;r!==o;r++)s[r]=t[r],n[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const t=s[r].id,e=n[r].id,o=t<e?`${t},${e}`:`${e},${t}`;i[o]=r,i.keys.push(o)}for(let r=0;r!==i.keys.length;r++){const o=i.keys.pop(),r=i[o];t.push(s[r]),e.push(n[r]),delete i[o]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new i;t.position.vsub(e.position,s);const n=t.shapes[0],o=e.shapes[0];return Math.pow(n.boundingSphereRadius+o.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,i){return[]}}const _=new i;new i,new u,new i;const U={keys:[]},X=[],Z=[];new i,new i,new i;class K extends Y{constructor(){super()}collisionPairs(t,e,i){const s=t.bodies,n=s.length;let o,r;for(let a=0;a!==n;a++)for(let t=0;t!==a;t++)o=s[a],r=s[t],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,i)}aabbQuery(t,e,i){void 0===i&&(i=[]);for(let s=0;s<t.bodies.length;s++){const n=t.bodies[s];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&i.push(n)}return i}}class ${constructor(){this.rayFromWorld=new i,this.rayToWorld=new i,this.hitNormalWorld=new i,this.hitPointWorld=new i,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,i,s,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(i),this.hitPointWorld.copy(s),this.shape=n,this.body=o,this.distance=r}}let Q,J,tt,et,it,st,nt;const ot=1,rt=2,at=4;Q=y.types.SPHERE,J=y.types.PLANE,tt=y.types.BOX,et=y.types.CYLINDER,it=y.types.CONVEXPOLYHEDRON,st=y.types.HEIGHTFIELD,nt=y.types.TRIMESH;class lt{get[Q](){return this._intersectSphere}get[J](){return this._intersectPlane}get[tt](){return this._intersectBox}get[et](){return this._intersectConvex}get[it](){return this._intersectConvex}get[st](){return this._intersectHeightfield}get[nt](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new i),void 0===e&&(e=new i),this.from=t.clone(),this.to=e.clone(),this.direction=new i,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=lt.ANY,this.result=new $,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||lt.ANY,this.result=e.result||new $,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ht),ct.length=0,t.broadphase.aabbQuery(t,ht,ct),this.intersectBodies(ct),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const i=this.checkCollisionResponse;if(i&&!t.collisionResponse)return;if(0===(this.collisionFilterGroup&t.collisionFilterMask)||0===(t.collisionFilterGroup&this.collisionFilterMask))return;const s=pt,n=yt;for(let o=0,r=t.shapes.length;o<r;o++){const e=t.shapes[o];if((!i||e.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],n),t.quaternion.vmult(t.shapeOffsets[o],s),s.vadd(t.position,s),this.intersectShape(e,n,s,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let i=0,s=t.length;!this.result.shouldStop&&i<s;i++)this.intersectBody(t[i])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,i,s){const n=function(t,e,i){i.vsub(t,It);const s=It.dot(e);e.scale(s,jt),jt.vadd(t,jt);const n=i.distanceTo(jt);return n}(this.from,this.direction,i);if(n>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,i,s,t)}_intersectBox(t,e,i,s,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,i,s,n)}_intersectPlane(t,e,s,n,o){const r=this.from,a=this.to,l=this.direction,h=new i(0,0,1);e.vmult(h,h);const c=new i;r.vsub(s,c);const u=c.dot(h);a.vsub(s,c);if(u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new i,y=new i,v=new i;r.vsub(s,p);const m=-h.dot(p)/d;l.scale(m,y),r.vadd(y,v),this.reportIntersection(h,v,o,n,-1)}getAABB(t){const{lowerBound:e,upperBound:i}=t,s=this.to,n=this.from;e.x=Math.min(s.x,n.x),e.y=Math.min(s.y,n.y),e.z=Math.min(s.z,n.z),i.x=Math.max(s.x,n.x),i.y=Math.max(s.y,n.y),i.z=Math.max(s.z,n.z)}_intersectHeightfield(t,e,i,s,n){t.data,t.elementSize;const o=bt;o.from.copy(this.from),o.to.copy(this.to),v.pointToLocalFrame(i,e,o.from,o.from),v.pointToLocalFrame(i,e,o.to,o.to),o.updateDirection();const a=Et;let l,h,c,u;l=h=0,c=u=t.data.length-1;const d=new r;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,a,!0),l=Math.max(l,a[0]),h=Math.max(h,a[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,a,!0),c=Math.min(c,a[0]+1),u=Math.min(u,a[1]+1);for(let r=l;r<c;r++)for(let a=h;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(r,a,!1),v.pointToWorldFrame(i,e,t.pillarOffset,xt),this._intersectConvex(t.pillarConvex,e,xt,s,n,gt),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),v.pointToWorldFrame(i,e,t.pillarOffset,xt),this._intersectConvex(t.pillarConvex,e,xt,s,n,gt)}}}_intersectSphere(t,e,i,s,n){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-i.x)+(r.y-o.y)*(o.y-i.y)+(r.z-o.z)*(o.z-i.z)),c=h**2-4*l*((o.x-i.x)**2+(o.y-i.y)**2+(o.z-i.z)**2-a**2),u=zt,d=St;if(!(c<0))if(0===c)o.lerp(r,c,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(o.lerp(r,t,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(o.lerp(r,e,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1))}}_intersectConvex(t,e,i,s,n,o){const r=Bt,a=Ct,l=o&&o.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),m=l?l.length:h.length,w=this.result;for(let f=0;!w.shouldStop&&f<m;f++){const t=l?l[f]:f,o=h[t],y=u[t],m=e,g=i;a.copy(c[o[0]]),m.vmult(a,a),a.vadd(g,a),a.vsub(p,a),m.vmult(y,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,vt),vt.vadd(p,vt),mt.copy(c[o[0]]),m.vmult(mt,mt),g.vadd(mt,mt);for(let e=1;!w.shouldStop&&e<o.length-1;e++){wt.copy(c[o[e]]),ft.copy(c[o[e+1]]),m.vmult(wt,wt),m.vmult(ft,ft),g.vadd(wt,wt),g.vadd(ft,ft);const i=vt.distanceTo(p);!lt.pointInTriangle(vt,mt,wt,ft)&&!lt.pointInTriangle(vt,wt,mt,ft)||i>v||this.reportIntersection(r,vt,n,s,t)}}}}_intersectTrimesh(t,e,i,s,n,o){const r=At,a=Pt,l=Tt,h=Ct,c=Mt,u=Ft,d=qt,p=Nt,y=Rt,m=t.indices;t.vertices;const w=this.from,f=this.to,g=this.direction;l.position.copy(i),l.quaternion.copy(e),v.vectorToLocalFrame(i,e,g,c),v.pointToLocalFrame(i,e,w,u),v.pointToLocalFrame(i,e,f,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let b=0,E=a.length;!this.result.shouldStop&&b!==E;b++){const o=a[b];t.getNormal(o,r),t.getVertex(m[3*o],mt),mt.vsub(u,h);const l=c.dot(r),d=r.dot(h)/l;if(d<0)continue;c.scale(d,vt),vt.vadd(u,vt),t.getVertex(m[3*o+1],wt),t.getVertex(m[3*o+2],ft);const w=vt.distanceSquared(u);!lt.pointInTriangle(vt,wt,mt,ft)&&!lt.pointInTriangle(vt,mt,wt,ft)||w>x||(v.vectorToWorldFrame(e,r,y),v.pointToWorldFrame(i,e,vt,p),this.reportIntersection(y,p,n,s,o))}a.length=0}reportIntersection(t,e,i,s,n){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==n?n:-1,this.mode){case lt.ALL:this.hasHit=!0,l.set(o,r,t,e,i,s,a),l.hasHit=!0,this.callback(l);break;case lt.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a));break;case lt.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a),l.shouldStop=!0}}static pointInTriangle(t,e,i,s){s.vsub(e,It),i.vsub(e,ut),t.vsub(e,dt);const n=It.dot(It),o=It.dot(ut),r=It.dot(dt),a=ut.dot(ut),l=ut.dot(dt);let h,c;return(h=a*r-o*l)>=0&&(c=n*l-o*r)>=0&&h+c<n*a-o*o}}lt.CLOSEST=ot,lt.ANY=rt,lt.ALL=at;const ht=new r,ct=[],ut=new i,dt=new i,pt=new i,yt=new u,vt=new i,mt=new i,wt=new i,ft=new i;new i,new $;const gt={faceList:[0]},xt=new i,bt=new lt,Et=[],zt=new i,St=new i,Bt=new i;new i,new i;const Ct=new i,At=new i,Mt=new i,Ft=new i,qt=new i,Rt=new i,Nt=new i;new r;const Pt=[],Tt=new v,It=new i,jt=new i;class Lt{static defaults(t,e){void 0===t&&(t={});for(let i in e)i in t||(t[i]=e[i]);return t}}class Ot{constructor(){this.spatial=new i,this.rotational=new i}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Wt{constructor(t,e,i,s){void 0===i&&(i=-1e6),void 0===s&&(s=1e6),this.id=Wt.idCounter++,this.minForce=i,this.maxForce=s,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Ot,this.jacobianElementB=new Ot,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,i){const s=e,n=t,o=i;this.a=4/(o*(1+4*s)),this.b=4*s/(1+4*s),this.eps=4/(o*o*n*(1+4*s))}computeB(t,e,i){const s=this.computeGW();return-this.computeGq()*t-s*e-this.computeGiMf()*i}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.position,o=s.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.velocity,o=s.velocity,r=i.angularVelocity,a=s.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.vlambda,o=s.vlambda,r=i.wlambda,a=s.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.force,o=i.torque,r=s.force,a=s.torque,l=i.invMassSolve,h=s.invMassSolve;return n.scale(l,kt),r.scale(h,Vt),i.invInertiaWorldSolve.vmult(o,Ht),s.invInertiaWorldSolve.vmult(a,Dt),t.multiplyVectors(kt,Ht)+e.multiplyVectors(Vt,Dt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.invMassSolve,o=s.invMassSolve,r=i.invInertiaWorldSolve,a=s.invInertiaWorldSolve;let l=n+o;return r.vmult(t.rotational,Gt),l+=Gt.dot(t.rotational),a.vmult(e.rotational,Gt),l+=Gt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,i=this.jacobianElementB,s=this.bi,n=this.bj,o=Yt;s.vlambda.addScaledVector(s.invMassSolve*t,e.spatial,s.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,i.spatial,n.vlambda),s.invInertiaWorldSolve.vmult(e.rotational,o),s.wlambda.addScaledVector(t,o,s.wlambda),n.invInertiaWorldSolve.vmult(i.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Wt.idCounter=0;const kt=new i,Vt=new i,Ht=new i,Dt=new i,Gt=new i,Yt=new i;class _t extends Wt{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new i,this.rj=new i,this.ni=new i}computeB(t){const e=this.a,i=this.b,s=this.bi,n=this.bj,o=this.ri,r=this.rj,a=Ut,l=Xt,h=s.velocity,c=s.angularVelocity;s.force,s.torque;const u=n.velocity,d=n.angularVelocity;n.force,n.torque;const p=Zt,y=this.jacobianElementA,v=this.jacobianElementB,m=this.ni;o.cross(m,a),r.cross(m,l),m.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(m),v.rotational.copy(l),p.copy(n.position),p.vadd(r,p),p.vsub(s.position,p),p.vsub(o,p);const w=m.dot(p),f=this.restitution+1;return-w*e-(f*u.dot(m)-f*h.dot(m)+d.dot(l)-c.dot(a))*i-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=Kt,e=$t,i=Qt,s=Jt,n=te;return this.bi.position.vadd(this.ri,i),this.bj.position.vadd(this.rj,s),this.bi.getVelocityAtWorldPoint(i,t),this.bj.getVelocityAtWorldPoint(s,e),t.vsub(e,n),this.ni.dot(n)}}const Ut=new i,Xt=new i,Zt=new i,Kt=new i,$t=new i,Qt=new i,Jt=new i,te=new i;new i,new i,new i,new i,new i,new i,new i,new i,new i,new i;class ee extends Wt{constructor(t,e,s){super(t,e,-s,s),this.ri=new i,this.rj=new i,this.t=new i}computeB(t){this.a;const e=this.b;this.bi,this.bj;const i=this.ri,s=this.rj,n=ie,o=se,r=this.t;i.cross(r,n),s.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),n.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);return-this.computeGW()*e-t*this.computeGiMf()}}const ie=new i,se=new i;class ne{constructor(t,e,i){i=Lt.defaults(i,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=ne.idCounter++,this.materials=[t,e],this.friction=i.friction,this.restitution=i.restitution,this.contactEquationStiffness=i.contactEquationStiffness,this.contactEquationRelaxation=i.contactEquationRelaxation,this.frictionEquationStiffness=i.frictionEquationStiffness,this.frictionEquationRelaxation=i.frictionEquationRelaxation}}ne.idCounter=0;class oe{constructor(t){void 0===t&&(t={});let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=oe.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}oe.idCounter=0,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new lt,new i,new i,new i,new i(1,0,0),new i(0,1,0),new i(0,0,1),new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i;class re extends y{constructor(t){if(super({type:y.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new i);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,i,s){const n=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const e=o[r];i[e]=t[e]-n,s[e]=t[e]+n}}}new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new i,new r,new i,new r,new i,new i,new i,new i,new i,new i,new i,new r,new i,new v,new r;class ae{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,i=e.indexOf(t);-1!==i&&e.splice(i,1)}removeAllEquations(){this.equations.length=0}}class le extends ae{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let i=0;const s=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,v;if(0!==r)for(let g=0;g!==l;g++)a[g].updateSolveMassProperties();const m=ce,w=ue,f=he;m.length=r,w.length=r,f.length=r;for(let g=0;g!==r;g++){const t=o[g];f[g]=0,w[g]=t.computeB(h),m[g]=1/t.computeC()}if(0!==r){for(let i=0;i!==l;i++){const t=a[i],e=t.vlambda,s=t.wlambda;e.set(0,0,0),s.set(0,0,0)}for(i=0;i!==s;i++){p=0;for(let t=0;t!==r;t++){const e=o[t];c=w[t],u=m[t],v=f[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*v),v+d<e.minForce?d=e.minForce-v:v+d>e.maxForce&&(d=e.maxForce-v),f[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<n)break}for(let i=0;i!==l;i++){const t=a[i],e=t.velocity,s=t.angularVelocity;t.vlambda.vmul(t.linearFactor,t.vlambda),e.vadd(t.vlambda,e),t.wlambda.vmul(t.angularFactor,t.wlambda),s.vadd(t.wlambda,s)}let t=o.length;const e=1/h;for(;t--;)o[t].multiplier=f[t]*e}return i}}const he=[],ce=[],ue=[];class de{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class pe extends de{constructor(){super(...arguments),this.type=i}constructObject(){return new i}}const ye=y.types.SPHERE,ve=y.types.SPHERE|y.types.PLANE,me=y.types.BOX|y.types.BOX,we=y.types.SPHERE|y.types.BOX,fe=y.types.PLANE|y.types.BOX,ge=y.types.CONVEXPOLYHEDRON,xe=y.types.SPHERE|y.types.CONVEXPOLYHEDRON,be=y.types.PLANE|y.types.CONVEXPOLYHEDRON,Ee=y.types.BOX|y.types.CONVEXPOLYHEDRON,ze=y.types.SPHERE|y.types.HEIGHTFIELD,Se=y.types.BOX|y.types.HEIGHTFIELD,Be=y.types.CONVEXPOLYHEDRON|y.types.HEIGHTFIELD,Ce=y.types.PARTICLE|y.types.SPHERE,Ae=y.types.PLANE|y.types.PARTICLE,Me=y.types.BOX|y.types.PARTICLE,Fe=y.types.PARTICLE|y.types.CONVEXPOLYHEDRON,qe=y.types.CYLINDER,Re=y.types.SPHERE|y.types.CYLINDER,Ne=y.types.PLANE|y.types.CYLINDER,Pe=y.types.BOX|y.types.CYLINDER,Te=y.types.CONVEXPOLYHEDRON|y.types.CYLINDER,Ie=y.types.HEIGHTFIELD|y.types.CYLINDER,je=y.types.PARTICLE|y.types.CYLINDER,Le=y.types.SPHERE|y.types.TRIMESH,Oe=y.types.PLANE|y.types.TRIMESH;class We{get[ye](){return this.sphereSphere}get[ve](){return this.spherePlane}get[me](){return this.boxBox}get[we](){return this.sphereBox}get[fe](){return this.planeBox}get[ge](){return this.convexConvex}get[xe](){return this.sphereConvex}get[be](){return this.planeConvex}get[Ee](){return this.boxConvex}get[ze](){return this.sphereHeightfield}get[Se](){return this.boxHeightfield}get[Be](){return this.convexHeightfield}get[Ce](){return this.sphereParticle}get[Ae](){return this.planeParticle}get[Me](){return this.boxParticle}get[Fe](){return this.convexParticle}get[qe](){return this.convexConvex}get[Re](){return this.sphereConvex}get[Ne](){return this.planeConvex}get[Pe](){return this.boxConvex}get[Te](){return this.convexConvex}get[Ie](){return this.heightfieldCylinder}get[je](){return this.particleCylinder}get[Le](){return this.sphereTrimesh}get[Oe](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new pe,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,i,s,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new _t(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&i.collisionResponse&&s.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=i.material||t.material,h=s.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=n||i,r.sj=o||s,r}createFrictionEquationsFromContact(t,e){const i=t.bi,s=t.bj,n=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=n.material||i.material,c=o.material||s.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const n=l*(r.frictionGravity||r.gravity).length();let o=i.invMass+s.invMass;o>0&&(o=1/o);const h=this.frictionEquationPool,c=h.length?h.pop():new ee(i,s,n*o),u=h.length?h.pop():new ee(i,s,n*o);return c.bi=u.bi=i,c.bj=u.bj=s,c.minForce=u.minForce=-n*o,c.maxForce=u.maxForce=n*o,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const i=this.frictionResult[this.frictionResult.length-2],s=this.frictionResult[this.frictionResult.length-1];ke.setZero(),Ve.setZero(),He.setZero();const n=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==n?(ke.vadd(e.ni,ke),Ve.vadd(e.ri,Ve),He.vadd(e.rj,He)):(ke.vsub(e.ni,ke),Ve.vadd(e.rj,Ve),He.vadd(e.ri,He));const o=1/t;Ve.scale(o,i.ri),He.scale(o,i.rj),s.ri.copy(i.ri),s.rj.copy(i.rj),ke.normalize(),ke.tangents(i.t,s.t)}getContacts(t,e,i,s,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=s,this.frictionResult=o;const a=Ye,l=_e,h=De,c=Ge;for(let u=0,d=t.length;u!==d;u++){const s=t[u],n=e[u];let o=null;s.material&&n.material&&(o=i.getContactMaterial(s.material,n.material)||null);const r=s.type&R.KINEMATIC&&n.type&R.STATIC||s.type&R.STATIC&&n.type&R.KINEMATIC||s.type&R.KINEMATIC&&n.type&R.KINEMATIC;for(let t=0;t<s.shapes.length;t++){s.quaternion.mult(s.shapeOrientations[t],a),s.quaternion.vmult(s.shapeOffsets[t],h),h.vadd(s.position,h);const e=s.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],c),c.vadd(n.position,c);const u=n.shapes[t];if(!(e.collisionFilterMask&u.collisionFilterGroup&&u.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+u.boundingSphereRadius)continue;let d=null;e.material&&u.material&&(d=i.getContactMaterial(e.material,u.material)||null),this.currentContactMaterial=d||o||i.defaultContactMaterial;const p=this[e.type|u.type];if(p){let t=!1;t=e.type<u.type?p.call(this,e,u,h,c,a,l,s,n,e,u,r):p.call(this,u,e,c,h,l,a,n,s,e,u,r),t&&r&&(i.shapeOverlapKeeper.set(e.id,u.id),i.bodyOverlapKeeper.set(s.id,n.id))}}}}}sphereSphere(t,e,i,s,n,o,r,a,l,h,c){if(c)return i.distanceSquared(s)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);s.vsub(i,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(i,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(s,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,i,s,n,o,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),o.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),i.vsub(s,ui),u.ni.scale(u.ni.dot(ui),di),ui.vsub(di,u.rj),-ui.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(i,t),t.vsub(r.position,t),e.vadd(s,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}sphereBox(t,e,i,s,n,o,r,a,l,h,c){const u=this.v3pool,d=bi;i.vsub(s,wi),e.getSideNormals(d,o);const p=t.radius;let y=!1;const v=zi,m=Si,w=Bi;let f=null,g=0,x=0,b=0,E=null;for(let R=0,N=d.length;R!==N&&!1===y;R++){const t=fi;t.copy(d[R]);const e=t.length();t.normalize();const i=wi.dot(t);if(i<e+p&&i>0){const s=gi,n=xi;s.copy(d[(R+1)%3]),n.copy(d[(R+2)%3]);const o=s.length(),r=n.length();s.normalize(),n.normalize();const a=wi.dot(s),l=wi.dot(n);if(a<o&&a>-o&&l<r&&l>-r){const o=Math.abs(i-e-p);if((null===E||o<E)&&(E=o,x=a,b=l,f=e,v.copy(t),m.copy(s),w.copy(n),g++,c))return!0}}}if(g){y=!0;const n=this.createContactEquation(r,a,t,e,l,h);v.scale(-p,n.ri),n.ni.copy(v),n.ni.negate(n.ni),v.scale(f,v),m.scale(x,m),v.vadd(m,v),w.scale(b,w),v.vadd(w,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}let z=u.get();const S=Ei;for(let R=0;2!==R&&!y;R++)for(let n=0;2!==n&&!y;n++)for(let o=0;2!==o&&!y;o++)if(z.set(0,0,0),R?z.vadd(d[0],z):z.vsub(d[0],z),n?z.vadd(d[1],z):z.vsub(d[1],z),o?z.vadd(d[2],z):z.vsub(d[2],z),s.vadd(z,S),S.vsub(i,S),S.lengthSquared()<p*p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);n.ri.copy(S),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(p,n.ri),n.rj.copy(z),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}u.release(z),z=null;const B=u.get(),C=u.get(),A=u.get(),M=u.get(),F=u.get(),q=d.length;for(let R=0;R!==q&&!y;R++)for(let n=0;n!==q&&!y;n++)if(R%3!=n%3){d[n].cross(d[R],B),B.normalize(),d[R].vadd(d[n],C),A.copy(i),A.vsub(C,A),A.vsub(s,A);const o=A.dot(B);B.scale(o,M);let u=0;for(;u===R%3||u===n%3;)u++;F.copy(i),F.vsub(M,F),F.vsub(C,F),F.vsub(s,F);const v=Math.abs(o),m=F.length();if(v<d[u].length()&&m<p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);C.vadd(M,n.rj),n.rj.copy(n.rj),F.negate(n.ni),n.ni.normalize(),n.ri.copy(n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(i,n.ri),n.ri.normalize(),n.ri.scale(p,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}u.release(B,C,A,M,F)}planeBox(t,e,i,s,n,o,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}convexConvex(t,e,i,s,n,o,r,a,l,h,c,u,d){const p=ki;if(!(i.distanceTo(s)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,i,n,s,o,p,u,d)){const u=[],d=Vi;t.clipAgainstHull(i,n,e,s,o,p,-100,100,u);let y=0;for(let n=0;n!==u.length;n++){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),v=o.ri,m=o.rj;p.negate(o.ni),u[n].normal.negate(d),d.scale(u[n].depth,d),u[n].point.vadd(d,v),m.copy(u[n].point),v.vsub(i,v),m.vsub(s,m),v.vadd(i,v),v.vsub(r.position,v),m.vadd(s,m),m.vsub(a.position,m),this.result.push(o),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,i,s,n,o,r,a,l,h,c){const u=this.v3pool;i.vsub(s,Ci);const d=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let m=!1;for(let w=0;w!==y.length;w++){const n=y[w],u=qi;o.vmult(n,u),s.vadd(u,u);const d=Fi;if(u.vsub(i,d),d.lengthSquared()<v*v){if(c)return!0;m=!0;const n=this.createContactEquation(r,a,t,e,l,h);return n.ri.copy(d),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(v,n.ri),u.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),void this.createFrictionEquationsFromContact(n,this.frictionResult)}}for(let w=0,f=p.length;w!==f&&!1===m;w++){const n=d[w],f=p[w],g=Ri;o.vmult(n,g);const x=Ni;o.vmult(y[f[0]],x),x.vadd(s,x);const b=Pi;g.scale(-v,b),i.vadd(b,b);const E=Ti;b.vsub(x,E);const z=E.dot(g),S=Ii;if(i.vsub(x,S),z<0&&S.dot(g)>0){const n=[];for(let t=0,e=f.length;t!==e;t++){const e=u.get();o.vmult(y[f[t]],e),s.vadd(e,e),n.push(e)}if(mi(n,g,i)){if(c)return!0;m=!0;const o=this.createContactEquation(r,a,t,e,l,h);g.scale(-v,o.ri),g.negate(o.ni);const d=u.get();g.scale(-z,d);const p=u.get();g.scale(-v,p),i.vsub(s,o.rj),o.rj.vadd(p,o.rj),o.rj.vadd(d,o.rj),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),u.release(d),u.release(p),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return}for(let d=0;d!==f.length;d++){const p=u.get(),m=u.get();o.vmult(y[f[(d+1)%f.length]],p),o.vmult(y[f[(d+2)%f.length]],m),s.vadd(p,p),s.vadd(m,m);const w=Ai;m.vsub(p,w);const g=Mi;w.unit(g);const x=u.get(),b=u.get();i.vsub(p,b);const E=b.dot(g);g.scale(E,x),x.vadd(p,x);const z=u.get();if(x.vsub(i,z),E>0&&E*E<w.lengthSquared()&&z.lengthSquared()<v*v){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);x.vsub(s,o.rj),x.vsub(i,o.ni),o.ni.normalize(),o.ni.scale(v,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return u.release(p),u.release(m),u.release(x),u.release(z),void u.release(b)}u.release(p),u.release(m),u.release(x),u.release(z),u.release(b)}for(let t=0,e=n.length;t!==e;t++)u.release(n[t])}}}planeConvex(t,e,i,s,n,o,r,a,l,h,c){const u=ji,d=Li;d.set(0,0,1),n.vmult(d,d);let p=0;const y=Oi;for(let v=0;v!==e.vertices.length;v++){u.copy(e.vertices[v]),o.vmult(u,u),s.vadd(u,u),u.vsub(i,y);if(d.dot(y)<=0){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),o=Wi;d.scale(d.dot(y),o),u.vsub(o,o),o.vsub(i,n.ri),n.ni.copy(d),u.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}sphereHeightfield(t,e,i,s,n,o,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=es,m=ts;v.pointToLocalFrame(s,o,i,m);let w=Math.floor((m.x-d)/p)-1,f=Math.ceil((m.x+d)/p)+1,g=Math.floor((m.y-d)/p)-1,x=Math.ceil((m.y+d)/p)+1;if(f<0||x<0||w>u.length||g>u[0].length)return;w<0&&(w=0),f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),w>=u.length&&(w=u.length-1),f>=u.length&&(f=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(w,g,f,x,b);const E=b[0],z=b[1];if(m.z-d>z||m.z+d<E)return;const S=this.result;for(let B=w;B<f;B++)for(let l=g;l<x;l++){const h=S.length;let u=!1;if(e.getConvexTrianglePillar(B,l,!1),v.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&u)return!0;if(e.getConvexTrianglePillar(B,l,!0),v.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&u)return!0;if(S.length-h>2)return}}boxHeightfield(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexHeightfield(t,e,i,s,n,o,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=Qi,m=Ji,w=$i;v.pointToLocalFrame(s,o,i,w);let f=Math.floor((w.x-p)/d)-1,g=Math.ceil((w.x+p)/d)+1,x=Math.floor((w.y-p)/d)-1,b=Math.ceil((w.y+p)/d)+1;if(g<0||b<0||f>u.length||x>u[0].length)return;f<0&&(f=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),f>=u.length&&(f=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const E=[];e.getRectMinMax(f,x,g,b,E);const z=E[0],S=E[1];if(!(w.z-p>S||w.z+p<z))for(let B=f;B<g;B++)for(let l=x;l<b;l++){let h=!1;if(e.getConvexTrianglePillar(B,l,!1),v.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,m,null)),c&&h)return!0;if(e.getConvexTrianglePillar(B,l,!0),v.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,m,null)),c&&h)return!0}}sphereParticle(t,e,i,s,n,o,r,a,l,h,c){const u=Yi;u.set(0,0,1),s.vsub(i,u);if(u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);u.normalize(),i.rj.copy(u),i.rj.scale(t.radius,i.rj),i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}planeParticle(t,e,i,s,n,o,r,a,l,h,c){const u=Hi;u.set(0,0,1),r.quaternion.vmult(u,u);const d=Di;s.vsub(r.position,d);if(u.dot(d)<=0){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0);const n=Gi;u.scale(u.dot(s),n),s.vsub(n,n),i.rj.copy(n),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}boxParticle(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexParticle(t,e,i,s,n,o,r,a,l,h,c){let u=-1;const d=Xi,p=Ki;let y=null;const v=Ui;if(v.copy(s),v.vsub(i,v),n.conjugate(_i),_i.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(i,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let e=0,i=t.faces.length;e!==i;e++){const i=[t.worldVertices[t.faces[e][0]]],n=t.worldFaceNormals[e];s.vsub(i[0],Zi);const o=-n.dot(Zi);if(null===y||Math.abs(o)<Math.abs(y)){if(c)return!0;y=o,u=e,d.copy(n)}}if(-1!==u){const n=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(s,p),p.vsub(i,p),n.rj.copy(p),d.negate(n.ni),n.ri.set(0,0,0);const o=n.ri,c=n.rj;o.vadd(s,o),o.vsub(a.position,o),c.vadd(i,c),c.vsub(r.position,c),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}}heightfieldCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexHeightfield(e,t,s,i,o,n,a,r,l,h,c)}particleCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexParticle(e,t,s,i,o,n,a,r,l,h,c)}sphereTrimesh(t,e,i,s,n,o,r,a,l,h,c){const u=ti,d=ei,p=ii,y=si,m=ni,w=oi,f=hi,g=Je,x=$e,b=ci;v.pointToLocalFrame(s,o,i,m);const E=t.radius;f.lowerBound.set(m.x-E,m.y-E,m.z-E),f.upperBound.set(m.x+E,m.y+E,m.z+E),e.getTrianglesInAABB(f,b);const z=Qe,S=t.radius*t.radius;for(let F=0;F<b.length;F++)for(let n=0;n<3;n++)if(e.getVertex(e.indices[3*b[F]+n],z),z.vsub(m,x),x.lengthSquared()<=S){if(g.copy(z),v.pointToWorldFrame(s,o,g,z),z.vsub(i,x),c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);n.ni.copy(x),n.ni.normalize(),n.ri.copy(n.ni),n.ri.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.copy(z),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}for(let F=0;F<b.length;F++)for(let n=0;n<3;n++){e.getVertex(e.indices[3*b[F]+n],u),e.getVertex(e.indices[3*b[F]+(n+1)%3],d),d.vsub(u,p),m.vsub(d,w);const f=w.dot(p);m.vsub(u,w);let g=w.dot(p);if(g>0&&f<0){m.vsub(u,w),y.copy(p),y.normalize(),g=w.dot(y),y.scale(g,w),w.vadd(u,w);if(w.distanceTo(m)<t.radius){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);w.vsub(m,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),v.pointToWorldFrame(s,o,w,w),w.vsub(a.position,n.rj),v.vectorToWorldFrame(o,n.ni,n.ni),v.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}}const B=ri,C=ai,A=li,M=Ke;for(let F=0,q=b.length;F!==q;F++){e.getTriangleVertices(b[F],B,C,A),e.getNormal(b[F],M),m.vsub(B,w);let n=w.dot(M);if(M.scale(n,w),m.vsub(w,w),n=w.distanceTo(m),lt.pointInTriangle(w,B,C,A)&&n<t.radius){if(c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);w.vsub(m,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),v.pointToWorldFrame(s,o,w,w),w.vsub(a.position,n.rj),v.vectorToWorldFrame(o,n.ni,n.ni),v.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,n,o,r,a,l,h,c,u){const d=new i,p=Ue;p.set(0,0,1),o.vmult(p,p);for(let y=0;y<e.vertices.length/3;y++){e.getVertex(y,d);const o=new i;o.copy(d),v.pointToWorldFrame(n,r,o,d);const m=Xe;d.vsub(s,m);if(p.dot(m)<=0){if(u)return!0;const i=this.createContactEquation(a,l,t,e,h,c);i.ni.copy(p);const s=Ze;p.scale(m.dot(p),s),d.vsub(s,s),i.ri.copy(s),i.ri.vsub(a.position,i.ri),i.rj.copy(d),i.rj.vsub(l.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}}}const ke=new i,Ve=new i,He=new i,De=new i,Ge=new i,Ye=new u,_e=new u,Ue=new i,Xe=new i,Ze=new i,Ke=new i,$e=new i;new i;const Qe=new i,Je=new i,ti=new i,ei=new i,ii=new i,si=new i,ni=new i,oi=new i,ri=new i,ai=new i,li=new i,hi=new r,ci=[],ui=new i,di=new i,pi=new i,yi=new i,vi=new i;function mi(t,e,i){let s=null;const n=t.length;for(let o=0;o!==n;o++){const r=t[o],a=pi;t[(o+1)%n].vsub(r,a);const l=yi;a.cross(e,l);const h=vi;i.vsub(r,h);const c=l.dot(h);if(!(null===s||c>0&&!0===s||c<=0&&!1===s))return!1;null===s&&(s=c>0)}return!0}const wi=new i,fi=new i,gi=new i,xi=new i,bi=[new i,new i,new i,new i,new i,new i],Ei=new i,zi=new i,Si=new i,Bi=new i,Ci=new i,Ai=new i,Mi=new i,Fi=new i,qi=new i,Ri=new i,Ni=new i,Pi=new i,Ti=new i,Ii=new i;new i,new i;const ji=new i,Li=new i,Oi=new i,Wi=new i,ki=new i,Vi=new i,Hi=new i,Di=new i,Gi=new i,Yi=new i,_i=new u,Ui=new i;new i;const Xi=new i,Zi=new i,Ki=new i,$i=new i,Qi=new i,Ji=[0],ts=new i,es=new i;class is{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const i=e;e=t,t=i}return t<<16|e}set(t,e){const i=this.getKey(t,e),s=this.current;let n=0;for(;i>s[n];)n++;if(i!==s[n]){for(let t=s.length-1;t>=n;t--)s[t+1]=s[t];s[n]=i}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const i=this.current,s=this.previous,n=i.length,o=s.length;let r=0;for(let a=0;a<n;a++){let e=!1;const n=i[a];for(;n>s[r];)r++;e=n===s[r],e||ss(t,n)}r=0;for(let a=0;a<o;a++){let t=!1;const n=s[a];for(;n>i[r];)r++;t=i[r]===n,t||ss(e,n)}}}function ss(t,e){t.push((4294901760&e)>>16,65535&e)}const ns=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class os{constructor(){this.data={keys:[]}}get(t,e){const i=ns(t,e);return this.data[i]}set(t,e,i){const s=ns(t,e);this.get(t,e)||this.data.keys.push(s),this.data[s]=i}delete(t,e){const i=ns(t,e),s=this.data.keys.indexOf(i);-1!==s&&this.data.keys.splice(s,1),delete this.data[i]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}class rs extends c{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new i,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new i,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new K,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new le,this.constraints=[],this.narrowphase=new We(this),this.collisionMatrix=new h,this.collisionMatrixPrevious=new h,this.bodyOverlapKeeper=new is,this.shapeOverlapKeeper=new is,this.contactmaterials=[],this.contactMaterialTable=new os,this.defaultMaterial=new oe("default"),this.defaultContactMaterial=new ne(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,i){i instanceof $?this.raycastClosest(t,e,{skipBackfaces:!0},i):this.raycastAll(t,e,{skipBackfaces:!0},i)}raycastAll(t,e,i,s){return void 0===i&&(i={}),i.mode=lt.ALL,i.from=t,i.to=e,i.callback=s,as.intersectWorld(this,i)}raycastAny(t,e,i,s){return void 0===i&&(i={}),i.mode=lt.ANY,i.from=t,i.to=e,i.result=s,as.intersectWorld(this,i)}raycastClosest(t,e,i,s){return void 0===i&&(i={}),i.mode=lt.CLOSEST,i.from=t,i.to=e,i.result=s,as.intersectWorld(this,i)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof R&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,i=this.bodies,s=i.indexOf(t);if(-1!==s){i.splice(s,1);for(let t=0;t!==i.length;t++)i[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let i=0;i<e.length;i++){const s=e[i].shapes;for(let e=0;e<s.length;e++){const i=s[e];if(i.id===t)return i}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const i=ls.now()/1e3;if(this.lastCallTime){const s=i-this.lastCallTime;this.step(t,s,e)}else this.step(t,void 0,e);this.lastCallTime=i}step(t,e,i){if(void 0===i&&(i=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const s=ls.now();let n=0;for(;this.accumulator>=t&&n<i&&(this.internalStep(t),this.accumulator-=t,n++,!(ls.now()-s>1e3*t)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,o,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,o,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,i=ys,s=vs,n=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=R.DYNAMIC;let u=-1/0;const d=this.constraints,p=ps;a.length();const y=a.x,v=a.y,m=a.z;let w=0;for(l&&(u=ls.now()),w=0;w!==n;w++){const t=o[w];if(t.type===c){const e=t.force,i=t.mass;e.x+=i*y,e.y+=i*v,e.z+=i*m}}for(let A=0,M=this.subsystems.length;A!==M;A++)this.subsystems[A].update();l&&(u=ls.now()),i.length=0,s.length=0,this.broadphase.collisionPairs(this,i,s),l&&(h.broadphase=ls.now()-u);let f=d.length;for(w=0;w!==f;w++){const t=d[w];if(!t.collideConnected)for(let e=i.length-1;e>=0;e-=1)(t.bodyA===i[e]&&t.bodyB===s[e]||t.bodyB===i[e]&&t.bodyA===s[e])&&(i.splice(e,1),s.splice(e,1))}this.collisionMatrixTick(),l&&(u=ls.now());const g=ds,x=e.length;for(w=0;w!==x;w++)g.push(e[w]);e.length=0;const b=this.frictionEquations.length;for(w=0;w!==b;w++)p.push(this.frictionEquations[w]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(i,s,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=ls.now()-u),l&&(u=ls.now()),w=0;w<this.frictionEquations.length;w++)r.addEquation(this.frictionEquations[w]);const E=e.length;for(let A=0;A!==E;A++){const t=e[A],i=t.bi,s=t.bj,n=t.si,o=t.sj;let a;if(a=i.material&&s.material&&this.getContactMaterial(i.material,s.material)||this.defaultContactMaterial,a.friction,i.material&&s.material&&(i.material.friction>=0&&s.material.friction>=0&&(i.material.friction,s.material.friction),i.material.restitution>=0&&s.material.restitution>=0&&(t.restitution=i.material.restitution*s.material.restitution)),r.addEquation(t),i.allowSleep&&i.type===R.DYNAMIC&&i.sleepState===R.SLEEPING&&s.sleepState===R.AWAKE&&s.type!==R.STATIC){s.velocity.lengthSquared()+s.angularVelocity.lengthSquared()>=2*s.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0)}if(s.allowSleep&&s.type===R.DYNAMIC&&s.sleepState===R.SLEEPING&&i.sleepState===R.AWAKE&&i.type!==R.STATIC){i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(s.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(i,s,!0),this.collisionMatrixPrevious.get(i,s)||(us.body=s,us.contact=t,i.dispatchEvent(us),us.body=i,s.dispatchEvent(us)),this.bodyOverlapKeeper.set(i.id,s.id),this.shapeOverlapKeeper.set(n.id,o.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=ls.now()-u,u=ls.now()),w=0;w!==n;w++){const t=o[w];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(f=d.length,w=0;w!==f;w++){const t=d[w];t.update();for(let e=0,i=t.equations.length;e!==i;e++){const i=t.equations[e];r.addEquation(i)}}r.solve(t,this),l&&(h.solve=ls.now()-u),r.removeAllEquations();const z=Math.pow;for(w=0;w!==n;w++){const e=o[w];if(e.type&c){const i=z(1-e.linearDamping,t),s=e.velocity;s.scale(i,s);const n=e.angularVelocity;if(n){const i=z(1-e.angularDamping,t);n.scale(i,n)}}}this.dispatchEvent(cs),l&&(u=ls.now());const S=this.stepnumber%(this.quatNormalizeSkip+1)===0,B=this.quatNormalizeFast;for(w=0;w!==n;w++)o[w].integrate(t,S,B);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=ls.now()-u),this.stepnumber+=1,this.dispatchEvent(hs);let C=!0;if(this.allowSleep)for(C=!1,w=0;w!==n;w++){const t=o[w];t.sleepTick(this.time),t.sleepState!==R.SLEEPING&&(C=!0)}this.hasActiveBodies=C}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(ms,ws),t){for(let t=0,e=ms.length;t<e;t+=2)fs.bodyA=this.getBodyById(ms[t]),fs.bodyB=this.getBodyById(ms[t+1]),this.dispatchEvent(fs);fs.bodyA=fs.bodyB=null}if(e){for(let t=0,e=ws.length;t<e;t+=2)gs.bodyA=this.getBodyById(ws[t]),gs.bodyB=this.getBodyById(ws[t+1]),this.dispatchEvent(gs);gs.bodyA=gs.bodyB=null}ms.length=ws.length=0;const i=this.hasAnyEventListener("beginShapeContact"),s=this.hasAnyEventListener("endShapeContact");if((i||s)&&this.shapeOverlapKeeper.getDiff(ms,ws),i){for(let t=0,e=ms.length;t<e;t+=2){const e=this.getShapeById(ms[t]),i=this.getShapeById(ms[t+1]);xs.shapeA=e,xs.shapeB=i,e&&(xs.bodyA=e.body),i&&(xs.bodyB=i.body),this.dispatchEvent(xs)}xs.bodyA=xs.bodyB=xs.shapeA=xs.shapeB=null}if(s){for(let t=0,e=ws.length;t<e;t+=2){const e=this.getShapeById(ws[t]),i=this.getShapeById(ws[t+1]);bs.shapeA=e,bs.shapeB=i,e&&(bs.bodyA=e.body),i&&(bs.bodyB=i.body),this.dispatchEvent(bs)}bs.bodyA=bs.bodyB=bs.shapeA=bs.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let i=0;i!==e;i++){const e=t[i];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new r;const as=new lt,ls=globalThis.performance||{};if(!ls.now){let t=Date.now();ls.timing&&ls.timing.navigationStart&&(t=ls.timing.navigationStart),ls.now=()=>Date.now()-t}new i;const hs={type:"postStep"},cs={type:"preStep"},us={type:R.COLLIDE_EVENT_NAME,body:null,contact:null},ds=[],ps=[],ys=[],vs=[],ms=[],ws=[],fs={type:"beginContact",bodyA:null,bodyB:null},gs={type:"endContact",bodyA:null,bodyB:null},xs={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},bs={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};export{R as B,ne as C,oe as M,K as N,re as S,i as V,rs as W,E as a};
